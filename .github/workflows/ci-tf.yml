name: ci-terraform

on:
  pull_request:
    branches:
      - development
      - staging
      - production
    paths:
      - "terraform/**"
      - ".github/workflows/ci-tf.yml"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  checks:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    environment: ${{ github.base_ref }}
    permissions:
      contents: read
      id-token: write
      pull-requests: write
    timeout-minutes: 20
    steps:
      - name: Checkeckout repository
        uses: actions/checkout@v4

      - name: Change timezone to the local
        run: sudo timedatectl set-timezone Asia/Ho_Chi_Minh

      - name: Authenticate to GCP
        uses: 'google-github-actions/auth@v2'
        with:
          service_account: '${{ secrets.GCP_SA }}'
          workload_identity_provider: '${{ secrets.GCP_WIP }}'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.10.2

      - name: Terraform init
        id: init
        run: terraform init -backend-config="${{ github.base_ref }}/config.gcs.tfbackend"

      - name: Terraform format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true


      - name: Terraform validate
        id: validate
        run: terraform validate -no-color 
        continue-on-error: true
        
      - name: Terraform plan
        id: plan
        run: terraform plan -no-color -var-file="${{ github.base_ref }}/terraform.tfvars" -input=false
        continue-on-error: true

      - uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          SHA: ${{ github.sha }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commit = await github.rest.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `${process.env.SHA}`
            })
            const commitDate = new Date(commit.data.commit.author.date).toLocaleString()

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
          
            const output = `#### 🖌 Terraform Format and Style: \`${{ steps.fmt.outcome }}\`
            #### ⚙️ Terraform Initialization: \`${{ steps.init.outcome }}\`
            #### 🤖 Terraform Validation: \`${{ steps.validate.outcome }}\`
              <details><summary>Validation Output</summary>

              \`\`\`\n
              ${{ steps.validate.outputs.stdout }}
              \`\`\`

              </details>

            #### 📖 Terraform Plan: \`${{ steps.plan.outcome }}\`

              <details><summary>Plan Details</summary>

              \`\`\`\n
              ${process.env.PLAN}
              \`\`\`

              </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`, Time: \`${commitDate}\`*`;

            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure' || steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: exit 1
